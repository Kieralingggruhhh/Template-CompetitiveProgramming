// 2 d?nh 

Code này dùng cho bài toán lu?ng có yêu c?u v? dung lu?ng c?a các nút trên m?ng, m?ng có nhi?u di?m thu và di?m phát. (Gi?i h?n kh? nang thông qua c?a các nút).

Bài toán
Cho m?t m?ng có n nút, m c?nh (m?t chi?u). Có ns di?m phát, nt di?m thu. M?i nút có m?t kh? nang thông qua. Tìm lu?ng c?c d?i trên m?ng.
Ð? ph?c t?p
t?i da lên d?n : O(n.m.m)

Code này c?a Nguy?n Ti?n Trung Kiên
#include <stdio.h>
#include <queue>
#include <vector>
using namespace std;

#define long long long
#define in -1+2*
#define out 2*

void minimize(int &a, int b){ if (a>b) a=b; }
void minimize(long &a, long b){ if (a>b) a=b; }

int n, m;
vector<int> a[12309];
char b[12309];
long c[234][234];
long f[234][234];

int d[12309];
int bfs(){
    queue<int> qu;
    int u, i, v;
    
    for (i=1; i<=n; i++) 
    if (b[i]!='S') d[i]=0;
    else { d[i]=-1; qu.push(i); }
    
    while (qu.size()){
        u=qu.front(); qu.pop();
        //printf("%d\n", u);
        if (b[u]=='T') return u;
        for (i=0; v=a[u][i]; i++)
        if (d[v]==0 && c[u][v] > f[u][v]){
            d[v]=u;
            qu.push(v);
        }
    }
    return 0;
}

long enlarge(int t){
    //printf("enlarge(%d)\n", t);
    long delta = 1000111000111000111LL;
    int i;
    for (i=t; d[i]!=-1; i=d[i]) 
    minimize(delta, c[d[i]][i] - f[d[i]][i]);
    for (i=t; d[i]!=-1; i=d[i]){
        f[d[i]][i] += delta;
        f[i][d[i]] -= delta;        
    }
    return delta;    
}

main(){
    int p, q, w, i, j; long r;
while (scanf("%d", &n) > 0){
    for (i=1; i<=n; i++) { 
        a[in i].clear(); a[out i].clear(); 
        b[in i] = b[out i] = 0;
    }
    for (i=1; i<=2*n; i++)
    for (j=1; j<=2*n; j++)
    c[i][j]=f[i][j]=0;
    
    for (i=1; i<=n; i++){
        scanf("%d", &p);
        a[in i].push_back(out i);
        a[out i].push_back(in i);
        c[in i][out i] = p;
    }
    scanf("%d", &m);
    for (i=1; i<=m; i++){
        scanf("%d%d%d", &p, &q, &w);
        a[out p].push_back(in q);
        a[in q].push_back(out p);
        c[out p][in q] += w;
    }
    int ns, nt;
    scanf("%d%d", &ns, &nt);
    for (i=1; i<=ns; i++) { scanf("%d", &p); b[in p]='S'; }
    for (i=1; i<=nt; i++) { scanf("%d", &p); b[out p]='T'; }
    n=n*2;
    for (i=1; i<=n; i++) a[i].push_back(0);
    
    r=0;
    while (i=bfs()) r += enlarge(i);    
    printf("%lld\n", r);
}
}



// mincut

#include <stdio.h>
#include <vector>
#include <queue>
using namespace std;

void minimize(int &a, int b){
    if (a>b) a=b;
}

int n, m;
vector<int> a[12309];
int start, target;
int c[123][123];
int f[123][123];
int d[12309];

bool bfs(int start, int target){
    queue<int> qu;
    int u, i, v;
    
    for (i=1; i<=n; i++) d[i]=0;
    d[start] = -1;
    qu.push(start);
    
    while (qu.size()){
        u=qu.front(); qu.pop();
        if (u==target) return true;
        for (i=0; v=a[u][i]; i++)
        if (d[v]==0 && f[u][v]<c[u][v]){
            d[v]=u;
            qu.push(v);
        }
    }
    return false;
}

int mincut(bool tracing=false){
    int u, i, v, r=0;
    for (u=1; u<=n; u++)
    for (i=0; v=a[u][i]; i++)
    if (d[u] && !d[v]) {
        r += c[u][v];
        if (tracing) printf("%d %d\n", u, v);
    }
    return r;
}


void enlarge(){
    int i;
    int delta=1000111000;
    for (i=target; i!=start; i=d[i])
    minimize(delta, c[d[i]][i]-f[d[i]][i]);
    for (i=target; i!=start; i=d[i]){
        f[d[i]][i] += delta;
        f[i][d[i]] -= delta;
    }
}

main(){
    int i, p, q, w;
for (;;){
    scanf("%d%d", &n, &m);
    if (n==0) return 0;
    
    for (i=1; i<=n; i++) a[i].clear();
    for (p=1; p<=n; p++)
    for (q=1; q<=n; q++)
    c[p][q]=f[p][q]=0;
    
    start=1, target=2;
    for (i=1; i<=m; i++){
        scanf("%d%d%d", &p, &q, &w);
        a[p].push_back(q);
        a[q].push_back(p);
        c[p][q]=c[q][p]=w;
    }
    for (i=1; i<=n; i++) a[i].push_back(0);
    
    while (bfs(start, target)) enlarge();
    mincut(true); printf("\n");
}
}

//

mincot

#include <stdio.h>
#include <vector>
#include <queue>
using namespace std;

//#define int long long

typedef pair<int, int> ii;
#define X first
#define Y second
bool minimize(int &a, int b){ if (a>b) a=b; else return false; return true; }

// Network container
int n, m;
vector<ii> a[12309]; //
int c[123][123]; //
int f[123][123]; //

ii d[12309];
bool inqueue[12309];

bool fb(int start, int target){
    queue<int> qu;
    int u, i, v;
    
    for (i=1; i<=n; i++) { inqueue[i]=false; d[i].X=1000111000; }
    qu.push(start); inqueue[start]=true; d[start].X=0;
    
    while (qu.size()){
        u=qu.front(); qu.pop(); inqueue[u]=false;
        for (i=0; v=a[u][i].Y; i++)
        if (c[u][v] > f[u][v])
        if (minimize(d[v].X, d[u].X + (f[u][v]>=0 ? a[u][i].X : -a[u][i].X) )){
            d[v].Y=u;
            if (!inqueue[v]) 
            { qu.push(v); inqueue[v]=true; } 
        }
    }
    if (d[target].X < 1000111000) return true;
    else return false;
}

int enlarge(int start, int target, int delta, int &answer){
    int i;
    for (i=target; i!=start; i=d[i].Y)
    if (f[d[i].Y][i] < 0) 
    minimize(delta, - f[d[i].Y][i]);
    else
    minimize(delta, c[d[i].Y][i] - f[d[i].Y][i]);
    for (i=target; i!=start; i=d[i].Y){
        f[d[i].Y][i] += delta;
        f[i][d[i].Y] -= delta;
    }
    answer += delta * d[target].X;
    return delta;
}

main(){
    freopen("input", "r", stdin);
    int i, j, p, q, w;
    int r=0, capacity=0;
while (scanf("%d%d", &n, &m) > 0){
    for (i=1; i<=n; i++) a[i].clear();
    for (i=1; i<=n; i++)
    for (j=1; j<=n; j++)
    f[i][j]=c[i][j]=0;
    for (i=1; i<=m; i++){
        scanf("%d%d%d", &p, &q, &w);
        a[p].push_back(ii(w, q));
        a[q].push_back(ii(w, p));
        c[p][q] += 1;
        c[q][p] += 1;
    }
    for (i=1; i<=n; i++) a[i].push_back(ii());
    scanf("%d%d", &capacity, &p);
    for (i=1; i<=n; i++)
    for (j=1; j<=n; j++)
    c[i][j] *= p;
    
    r=0;
    while (fb(1, n))
    if (capacity == 0) break;
    else capacity -= enlarge(1, n, capacity, r);
    if (capacity != 0) printf("Impossible.\n");
    else printf("%d\n", r);
}
}

Nh?n xét
Code này dã du?c dùng d? n?p cho m?t bài t?p trên UVa. (sau m?t s? ch?nh s?a nhó)

Ð? g?c du?c l?y t? trên UVa.
"Có m?t m?ng dây cáp dùng d? v?n chuy?n tín hi?u. 
T?t c? các dây d?n ch? t?i du?c t?i da K don v? tín hi?u 
(Không có K don v? tín hi?u nào cùng di qua m?t dây d?n). 
C?n v?n chuy?n D don v? tín hi?u t? di?m 1 d?n di?m n. 
V?i m?i don v? tín hi?u, ta ch?n m?t du?ng di t? 1 d?n n và 
di chuy?n tín hi?u theo du?ng di dó.
Ð? dua m?t don v? tín hi?u qua m?t do?n dây n?i t? i d?n j 
(du?ng n?i hai chi?u), thì ph?i m?t c[i][j] don v? th?i gian. 
Tim cách d? v?n chuy?n D don v? tín hi?u v?i th?i gian ng?n nh?t.
 V?i ví d? sau dây, ta c?n v?n chuy?n 20 don v? tín hi?u, 
 d?u tiên ta cho m?t tín hi?u di theo du?ng AD, 
 m?t 1 th?i gian, còn l?i 19 don v? tín hi?u, làm tuong t? 
 v?i 9 don v? tín hi?u n?a. V?y là ta dã v?n chuy?n duu?c 10 
 don v? tín hi?u. Ð?n dây thì dây n?i AD dã v?n chuy?n d? 10 
 tín hi?u (Link capacity) thê nên không th? dùng dây n?i AD 
 duu?c n?a. Ð?i v?i 10 tín hi?u còn l?i, ta chuy?n qua duu?c ABD, 
 m?i tín hi?u m?t 7 th?i gian, 
 t?ng là ta m?t 10+70=80 don v? th?i gian. (d?ch t? UVa)."
