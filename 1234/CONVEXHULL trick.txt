#include <bits/stdc++.h>
#define FI first
#define SE second
#define EPS 1e-9
#define ALL(a) a.begin(),a.end()
#define SZ(a) int((a).size())
#define MS(s, n) memset(s, n, sizeof(s))
#define FOR(i,a,b) for (int i = (a); i <= (b); i++)
#define FORE(i,a,b) for (int i = (a); i >= (b); i--)
#define FORALL(it, a) for (__typeof((a).begin()) it = (a).begin(); it != (a).end(); it++)
#define WHATIS(x) cout << #x << " is " << x << endl;
#define ERROR(args...) { string _s = #args; replace(_s.begin(), _s.end(), ',', ' '); stringstream _ss(_s); istream_iterator<string> _it(_ss); err(_it, args); }
//__builtin_ffs(x) return 1 + index of least significant 1-bit of x
//__builtin_clz(x) return number of leading zeros of x
//__builtin_ctz(x) return number of trailing zeros of x
 
using namespace std;
using ll = long long;
using ld = double;
typedef pair<int, int> II;
typedef pair<II, int> III;
typedef complex<ld> cd;
typedef vector<cd> vcd;
 
void err(istream_iterator<string> it) {}
template<typename T, typename... Args>
void err(istream_iterator<string> it, T a, Args... args) {
    cout << *it << " = " << a << endl;
    err(++it, args...);
}
 
const ll MODBASE = 1000000007LL;
const int MAXN = 200010;
const int MAXM = 200010;
const int MAXK = 110;
const int MAXQ = 200010;
 
int n, pointer;
ll con, h[MAXN];
ll a[MAXN], b[MAXN], dp[MAXN];
vector<ll> M, C;
 
ld getIntersection(int l1, int l2) {
    if (l2 == SZ(M)) return 1e20;
    return (ld) (C[l1] - C[l2]) / (M[l2] - M[l1]); 
}
 
ll query(ll k) {
    ll res = 0;
    int dau = 0, cuoi = SZ(M)-1;
    while (dau <= cuoi) {
        int mid = (dau + cuoi) >> 1;
        if (k <= getIntersection(mid, mid+1)) cuoi = mid-1; else dau = mid+1;
    }
    res = M[dau] * k + C[dau];
    return res;
}
 
bool isBad(int l1, int l2, int l3) {
    // bad khi giao cua l1 va l3 nam ben trai giao cua l1 va l2 // intersection(l1,l2) has x-coordinate (c1-c2)/(m2-m1)
    // intersection(l1,l3) has x-coordinate (c1-c3)/(m3-m1)
    return (ld) (C[l3] - C[l1]) / (M[l1] - M[l3]) < (ld) (C[l2] - C[l1]) / (M[l1] - M[l2]);
}
 
void add(ll m, ll c) {
    M.emplace_back(m);
    C.emplace_back(c);
    while (SZ(M) >= 3 && isBad(SZ(M)-3, SZ(M)-2, SZ(M)-1)) {
        M.erase(M.end()-2);
        C.erase(C.end()-2);
    }
}
 
int main() {
    ios::sync_with_stdio(0);
    cin.tie(nullptr);
    cin >> n >> con;
    FOR(i,1,n) cin >> h[i];
    dp[1] = 0;
    add(-h[1], dp[1] + h[1] * h[1]);
    pointer = 0;
    FOR(i,2,n) {
        dp[i] = query(2*h[i]) + con + h[i] * h[i];
        if (i != n) add(-h[i], dp[i] + h[i] * h[i]);
    }
    cout << dp[n];
    return 0;
}